[{"/home/hasintha/Desktop/projects/alan/website/src/App.tsx":"1","/home/hasintha/Desktop/projects/alan/website/src/index.tsx":"2","/home/hasintha/Desktop/projects/alan/website/src/components/visualizer/Visualizer.tsx":"3","/home/hasintha/Desktop/projects/alan/website/src/components/text/Text.tsx":"4","/home/hasintha/Desktop/projects/alan/website/src/reportWebVitals.ts":"5"},{"size":5527,"mtime":1608796641798,"results":"6","hashOfConfig":"7"},{"size":608,"mtime":1608791435326,"results":"8","hashOfConfig":"7"},{"size":839,"mtime":1608797840761,"results":"9","hashOfConfig":"7"},{"size":160,"mtime":1608548223119,"results":"10","hashOfConfig":"7"},{"size":425,"mtime":1608528801720,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bq3o2c",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/hasintha/Desktop/projects/alan/website/src/App.tsx",[],"/home/hasintha/Desktop/projects/alan/website/src/index.tsx",[],"/home/hasintha/Desktop/projects/alan/website/src/components/visualizer/Visualizer.tsx",["22"],"/home/hasintha/Desktop/projects/alan/website/src/components/text/Text.tsx",[],"/home/hasintha/Desktop/projects/alan/website/src/reportWebVitals.ts",[],{"ruleId":"23","severity":1,"message":"24","line":17,"column":15,"nodeType":"25","endLine":17,"endColumn":31},"react-hooks/exhaustive-deps","Assignments to the 'mic' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression"]